// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRIE_H_
#define FLATBUFFERS_GENERATED_TRIE_H_

#include "flatbuffers/flatbuffers.h"

struct TripleEntry;

struct TripleArray;
struct TripleArrayBuilder;

struct DoubleEntry;

struct DoubleArray;
struct DoubleArrayBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) TripleEntry FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t base_;
  int32_t check_;
  int32_t next_;
  uint8_t term_;
  int8_t padding0__;  int16_t padding1__;

 public:
  TripleEntry() {
    memset(static_cast<void *>(this), 0, sizeof(TripleEntry));
  }
  TripleEntry(int32_t _base, int32_t _check, int32_t _next, bool _term)
      : base_(flatbuffers::EndianScalar(_base)),
        check_(flatbuffers::EndianScalar(_check)),
        next_(flatbuffers::EndianScalar(_next)),
        term_(flatbuffers::EndianScalar(static_cast<uint8_t>(_term))),
        padding0__(0),
        padding1__(0) {
    (void)padding0__;    (void)padding1__;
  }
  int32_t base() const {
    return flatbuffers::EndianScalar(base_);
  }
  int32_t check() const {
    return flatbuffers::EndianScalar(check_);
  }
  int32_t next() const {
    return flatbuffers::EndianScalar(next_);
  }
  bool term() const {
    return flatbuffers::EndianScalar(term_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(TripleEntry, 16);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) DoubleEntry FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t base_;
  int32_t check_;
  uint8_t term_;
  int8_t padding0__;  int16_t padding1__;

 public:
  DoubleEntry() {
    memset(static_cast<void *>(this), 0, sizeof(DoubleEntry));
  }
  DoubleEntry(int32_t _base, int32_t _check, bool _term)
      : base_(flatbuffers::EndianScalar(_base)),
        check_(flatbuffers::EndianScalar(_check)),
        term_(flatbuffers::EndianScalar(static_cast<uint8_t>(_term))),
        padding0__(0),
        padding1__(0) {
    (void)padding0__;    (void)padding1__;
  }
  int32_t base() const {
    return flatbuffers::EndianScalar(base_);
  }
  int32_t check() const {
    return flatbuffers::EndianScalar(check_);
  }
  bool term() const {
    return flatbuffers::EndianScalar(term_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(DoubleEntry, 12);

struct TripleArray FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TripleArrayBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTRIES = 4
  };
  const flatbuffers::Vector<const TripleEntry *> *entries() const {
    return GetPointer<const flatbuffers::Vector<const TripleEntry *> *>(VT_ENTRIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ENTRIES) &&
           verifier.VerifyVector(entries()) &&
           verifier.EndTable();
  }
};

struct TripleArrayBuilder {
  typedef TripleArray Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_entries(flatbuffers::Offset<flatbuffers::Vector<const TripleEntry *>> entries) {
    fbb_.AddOffset(TripleArray::VT_ENTRIES, entries);
  }
  explicit TripleArrayBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TripleArray> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TripleArray>(end);
    return o;
  }
};

inline flatbuffers::Offset<TripleArray> CreateTripleArray(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const TripleEntry *>> entries = 0) {
  TripleArrayBuilder builder_(_fbb);
  builder_.add_entries(entries);
  return builder_.Finish();
}

inline flatbuffers::Offset<TripleArray> CreateTripleArrayDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<TripleEntry> *entries = nullptr) {
  auto entries__ = entries ? _fbb.CreateVectorOfStructs<TripleEntry>(*entries) : 0;
  return CreateTripleArray(
      _fbb,
      entries__);
}

struct DoubleArray FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DoubleArrayBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTRIES = 4
  };
  const flatbuffers::Vector<const DoubleEntry *> *entries() const {
    return GetPointer<const flatbuffers::Vector<const DoubleEntry *> *>(VT_ENTRIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ENTRIES) &&
           verifier.VerifyVector(entries()) &&
           verifier.EndTable();
  }
};

struct DoubleArrayBuilder {
  typedef DoubleArray Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_entries(flatbuffers::Offset<flatbuffers::Vector<const DoubleEntry *>> entries) {
    fbb_.AddOffset(DoubleArray::VT_ENTRIES, entries);
  }
  explicit DoubleArrayBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DoubleArray> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DoubleArray>(end);
    return o;
  }
};

inline flatbuffers::Offset<DoubleArray> CreateDoubleArray(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const DoubleEntry *>> entries = 0) {
  DoubleArrayBuilder builder_(_fbb);
  builder_.add_entries(entries);
  return builder_.Finish();
}

inline flatbuffers::Offset<DoubleArray> CreateDoubleArrayDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<DoubleEntry> *entries = nullptr) {
  auto entries__ = entries ? _fbb.CreateVectorOfStructs<DoubleEntry>(*entries) : 0;
  return CreateDoubleArray(
      _fbb,
      entries__);
}

inline const DoubleArray *GetDoubleArray(const void *buf) {
  return flatbuffers::GetRoot<DoubleArray>(buf);
}

inline const DoubleArray *GetSizePrefixedDoubleArray(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DoubleArray>(buf);
}

inline bool VerifyDoubleArrayBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DoubleArray>(nullptr);
}

inline bool VerifySizePrefixedDoubleArrayBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DoubleArray>(nullptr);
}

inline void FinishDoubleArrayBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DoubleArray> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDoubleArrayBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DoubleArray> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_TRIE_H_
